Shader "Hidden/MKGlowCompose" {
Properties {
 _MainTex ("", 2D) = "Black" { }
 _GlowTex ("", 2D) = "Black" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 64922
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_texcoord v0
					    dcl_position v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v1
					    dp4 o0.y, c1, v1
					    dp4 o0.z, c2, v1
					    dp4 o0.w, c3, v1
					    mov o1.xy, v0
					    mov o2.xy, v0
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_TEXCOORD0;
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_TEXCOORD0;
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _GlowTex;
					//   float4 _GlowTex_TexelSize;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _GlowTex_TexelSize c0       1
					//   _MainTex           s0       1
					//   _GlowTex           s1       1
					//
					
					    ps_3_0
					    def c1, 0, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.y, c0.y
					    cmp r0.x, -r0.y, r0.y, c1.x
					    rcp r0.z, c0.y
					    mul r0.x, r0.z, r0.x
					    max r1.x, r0.y, c1.x
					    mul r0.y, r0.z, r1.x
					    lrp r1.y, v1.y, r0.y, r0.x
					    mov r1.x, v1.x
					    texld_pp r0, r1, s1
					    texld_pp r1, v0, s0
					    add_pp oC0, r0, r1
					
					// approximately 11 instruction slots used (2 texture, 9 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 _GlowTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GlowTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_TARGET0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.x = max(_GlowTex_TexelSize.y, 0.0);
					    u_xlat0.x = u_xlat0.x / _GlowTex_TexelSize.y;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;
					    u_xlat2 = min(_GlowTex_TexelSize.y, 0.0);
					    u_xlat2 = u_xlat2 / _GlowTex_TexelSize.y;
					    u_xlat4 = (-vs_TEXCOORD1.y) + 1.0;
					    u_xlat0.y = u_xlat2 * u_xlat4 + u_xlat0.x;
					    u_xlat0.x = vs_TEXCOORD1.x;
					    u_xlat0 = texture(_GlowTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_TARGET0 = u_xlat0 + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 _GlowTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GlowTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_TARGET0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.x = max(_GlowTex_TexelSize.y, 0.0);
					    u_xlat0.x = u_xlat0.x / _GlowTex_TexelSize.y;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;
					    u_xlat2 = min(_GlowTex_TexelSize.y, 0.0);
					    u_xlat2 = u_xlat2 / _GlowTex_TexelSize.y;
					    u_xlat4 = (-vs_TEXCOORD1.y) + 1.0;
					    u_xlat0.y = u_xlat2 * u_xlat4 + u_xlat0.x;
					    u_xlat0.x = vs_TEXCOORD1.x;
					    u_xlat0 = texture(_GlowTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_TARGET0 = u_xlat0 + u_xlat1;
					    return;
					}"
}
}
 }
}
Fallback Off
}